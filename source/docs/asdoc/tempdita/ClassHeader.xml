<?xml version="1.0" encoding="UTF-8"?>
<allClasses>
   <apiPackage id="org.as3coreaddendum.display">
      <apiName>org.as3coreaddendum.display</apiName>
      <apiDetail/>
      <apiClassifier id="org.as3coreaddendum.display:IDisplayObjectContainer">
         <apiName>IDisplayObjectContainer</apiName>
         <shortdesc>
	 When working on an architecture of interfaces for user-interface components, this interface may be desirable.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IDisplayObjectContainer,org.as3coreaddendum.display.IDisplayObjectContainer,accessibilityImplementation,accessibilityProperties,alpha,blendMode,blendShader,doubleClickEnabled,filters,focusRect,height,loaderInfo,mask,mouseChildren,mouseEnabled,mouseX,mouseY,name,numChildren,opaqueBackground,parent,root,rotation,rotationX,rotationY,rotationZ,scale9Grid,scaleX,scaleY,scaleZ,scrollRect,stage,tabChildren,tabEnabled,tabIndex,textSnapshot,transform,visible,width,x,y,z,addChildAt,addChild,areInaccessibleObjectsUnderPoint,contains,getBounds,getChildAt,getChildByName,getChildIndex,getObjectsUnderPoint,getRect,globalToLocal3D,globalToLocal,hitTestObject,hitTestPoint,local3DToGlobal,localToGlobal,removeChildAt,removeChild,setChildIndex,swapChildrenAt,swapChildren"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.as3coreaddendum.display:IInteractiveObject</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 When working on an architecture of interfaces for user-interface components, this interface may be desirable.
	 <p>This interface simulates a native <codeph>DisplayObjectContainer</codeph> interface, specifying all methods and properties of the <codeph>DisplayObjectContainer</codeph> class for pure Flash Player 10.</p>
	              <p>For more information see the ActionScript 3.0 Language Reference.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface>
                  <Interface id="org.as3coreaddendum.display:IInteractiveObject"/>
                  <Interface id="org.as3coreaddendum.display:IDisplayObject"/>
                  <Interface id="flash.events:IEventDispatcher"/>
               </BaseInterface>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements>
                  <Implement id="org.as3coreaddendum.display:IInteractiveObject"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.display:IDisplayObject">
         <apiName>IDisplayObject</apiName>
         <shortdesc>
	 When working on an architecture of interfaces for user-interface components, this interface may be desirable.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IDisplayObject,org.as3coreaddendum.display.IDisplayObject,accessibilityImplementation,accessibilityProperties,alpha,blendMode,blendShader,doubleClickEnabled,filters,focusRect,height,loaderInfo,mask,mouseChildren,mouseEnabled,mouseX,mouseY,name,numChildren,opaqueBackground,parent,root,rotation,rotationX,rotationY,rotationZ,scale9Grid,scaleX,scaleY,scaleZ,scrollRect,stage,tabChildren,tabEnabled,tabIndex,textSnapshot,transform,visible,width,x,y,z,addChildAt,addChild,areInaccessibleObjectsUnderPoint,contains,getBounds,getChildAt,getChildByName,getChildIndex,getObjectsUnderPoint,getRect,globalToLocal3D,globalToLocal,hitTestObject,hitTestPoint,local3DToGlobal,localToGlobal,removeChildAt,removeChild,setChildIndex,swapChildrenAt,swapChildren"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 When working on an architecture of interfaces for user-interface components, this interface may be desirable.
	 <p>This interface simulates a native <codeph>DisplayObject</codeph> interface, specifying all methods and properties of the <codeph>DisplayObject</codeph> class for pure Flash Player 10.</p>
	              <p>For more information see the ActionScript 3.0 Language Reference.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface>
                  <Interface id="flash.events:IEventDispatcher"/>
               </BaseInterface>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements>
                  <Implement id="flash.events:IEventDispatcher"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.display:IInteractiveObject">
         <apiName>IInteractiveObject</apiName>
         <shortdesc>
	 When working on an architecture of interfaces for user-interface components, this interface may be desirable.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IInteractiveObject,org.as3coreaddendum.display.IInteractiveObject,accessibilityImplementation,accessibilityProperties,alpha,blendMode,blendShader,doubleClickEnabled,filters,focusRect,height,loaderInfo,mask,mouseChildren,mouseEnabled,mouseX,mouseY,name,numChildren,opaqueBackground,parent,root,rotation,rotationX,rotationY,rotationZ,scale9Grid,scaleX,scaleY,scaleZ,scrollRect,stage,tabChildren,tabEnabled,tabIndex,textSnapshot,transform,visible,width,x,y,z"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.as3coreaddendum.display:IDisplayObject</apiBaseInterface>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 When working on an architecture of interfaces for user-interface components, this interface may be desirable.
	 <p>This interface simulates a native <codeph>InteractiveObject</codeph> interface, specifying all properties of the <codeph>InteractiveObject</codeph> class for pure Flash Player 10.</p>
	              <p>For more information see the ActionScript 3.0 Language Reference.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface>
                  <Interface id="org.as3coreaddendum.display:IDisplayObject"/>
                  <Interface id="flash.events:IEventDispatcher"/>
               </BaseInterface>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements>
                  <Implement id="org.as3coreaddendum.display:IDisplayObject"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="org.as3coreaddendum.errors">
      <apiName>org.as3coreaddendum.errors</apiName>
      <apiDetail/>
      <apiClassifier id="org.as3coreaddendum.errors:UnsupportedOperationError">
         <apiName>UnsupportedOperationError</apiName>
         <shortdesc>
	 The error that is thrown to indicate that the requested operation is not supported.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="UnsupportedOperationError,org.as3coreaddendum.errors.UnsupportedOperationError"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Error</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The error that is thrown to indicate that the requested operation is not supported.
	 
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Error"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.errors:NullPointerError">
         <apiName>NullPointerError</apiName>
         <shortdesc>
	 The error that is thrown to indicate that null was received when an object was required.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="NullPointerError,org.as3coreaddendum.errors.NullPointerError"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Error</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The error that is thrown to indicate that <codeph>null</codeph> was received when an object was required.
	 
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Error"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.errors:CloneNotSupportedError">
         <apiName>CloneNotSupportedError</apiName>
         <shortdesc>
	 The error that is thrown to indicate that an object could not or should not be cloned.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="CloneNotSupportedError,org.as3coreaddendum.errors.CloneNotSupportedError"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Error</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The error that is thrown to indicate that an object could not or should not be cloned. 
	 
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Error"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
         <related-links>
            <link href="org.as3coreaddendum.system.xml#ICloneable">
               <linktext>ICloneable</linktext>
            </link>
         </related-links>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.errors:InvalidEnumArgumentError">
         <apiName>InvalidEnumArgumentError</apiName>
         <shortdesc>
	 The error that is thrown to indicate that you pass an invalid enumeration value to a method or when setting a property.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="InvalidEnumArgumentError,org.as3coreaddendum.errors.InvalidEnumArgumentError"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Error</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The error that is thrown to indicate that you pass an invalid enumeration value to a method or when setting a property.
	 
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Error"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
         <related-links>
            <link href="org.as3coreaddendum.system.xml#Enum">
               <linktext>Enum</linktext>
            </link>
         </related-links>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.errors:ClassCastError">
         <apiName>ClassCastError</apiName>
         <shortdesc>
	 The error that is thrown to indicate that another type of class was expected.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ClassCastError,org.as3coreaddendum.errors.ClassCastError"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Error</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The error that is thrown to indicate that another type of class was expected.
	 
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Error"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.errors:ObjectDisposedError">
         <apiName>ObjectDisposedError</apiName>
         <shortdesc>
	 The error that is thrown when an operation is performed on a disposed object that implements the org.as3coreaddendum.system.IDisposable interface.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ObjectDisposedError,org.as3coreaddendum.errors.ObjectDisposedError"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Error</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The error that is thrown when an operation is performed on a disposed object that implements the org.as3coreaddendum.system.IDisposable interface.
	 
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Error"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
         <related-links>
            <link href="org.as3coreaddendum.system.xml#IDisposable">
               <linktext>IDisposable</linktext>
            </link>
         </related-links>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.errors:IllegalStateError">
         <apiName>IllegalStateError</apiName>
         <shortdesc>
	 The error that is thrown to indicate that an object entered into an illegal state.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IllegalStateError,org.as3coreaddendum.errors.IllegalStateError"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Error</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The error that is thrown to indicate that an object entered into an illegal state.
	 
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Error"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="org.as3coreaddendum.events">
      <apiName>org.as3coreaddendum.events</apiName>
      <apiDetail/>
      <apiClassifier id="org.as3coreaddendum.events:PriorityEvent">
         <apiName>PriorityEvent</apiName>
         <shortdesc>
	 This event should be dispatched by objects that implement org.as3coreaddendum.system.IPriority interface and had its "priority" setter invoked.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="PriorityEvent,org.as3coreaddendum.events.PriorityEvent,CHANGED,CHANGED,index,priority,clone,clone"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 This event should be dispatched by objects that implement <codeph>org.as3coreaddendum.system.IPriority</codeph> interface and had its "priority" setter invoked.
	 This way the object will inform that its priority was changed.
	 <p>But if the object does not implement <codeph>flash.events.IEventDispatcher</codeph> interface, that's ok to not dispatch this event.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="flash.events:Event"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.events:IndexEvent">
         <apiName>IndexEvent</apiName>
         <shortdesc>
	 This event should be dispatched by objects that implement org.as3coreaddendum.system.IIndex interface and had its "index" setter invoked.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IndexEvent,org.as3coreaddendum.events.IndexEvent,CHANGED,CHANGED,index,priority,clone,clone"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>flash.events:Event</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 This event should be dispatched by objects that implement <codeph>org.as3coreaddendum.system.IIndex</codeph> interface and had its "index" setter invoked.
	 This way the object will inform that its index was changed.
	 <p>But if the object does not implement <codeph>flash.events.IEventDispatcher</codeph> interface, that's ok to not dispatch this event.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="flash.events:Event"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="org.as3coreaddendum.system.comparators">
      <apiName>org.as3coreaddendum.system.comparators</apiName>
      <apiDetail/>
      <apiClassifier id="org.as3coreaddendum.system.comparators:NumberComparator">
         <apiName>NumberComparator</apiName>
         <shortdesc>
	 A comparator for Number objects.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="NumberComparator,org.as3coreaddendum.system.comparators.NumberComparator,CASE_INSENSITIVE,FALSE_FIRST,LOWER_CASE_FIRST,TRUE_FIRST,UPPER_CASE_FIRST,comparator,comparison,comparison,decimalPlaces,property,stringCase,useDecimalPlaces,compare,compare,compare,compare,compare,compare,compare,compare,compare,toString,toString,toString,toString,toString"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.as3coreaddendum.system:IComparator</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A comparator for <codeph>Number</codeph> objects.
	 
	 </apiDesc>
            <example>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.comparators.NumberComparator;
	 
	 var c:NumberComparator = new NumberComparator();
	 
	 c.compare(0, 0);              // 0
	 c.compare(1, 1);              // 0
	 c.compare(0, 1);              // -1
	 c.compare(94, 56);            // 1
	 c.compare(-38, -27);          // -1
	 c.compare(2.5, 2.5);          // 0
	 c.compare(2.54, 2.54);        // 0
	 c.compare(2.54, 2.56);        // -1
	 c.compare(2.567, 2.567);      // 0
	 c.compare(2.5678, 2.5677);    // 1
	 c.compare(2.5678, 2.5674);    // 1
	 c.compare(2.5674, 2.5678);    // -1
	 </codeblock>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.comparators.NumberComparator;
	 
	 var c1:NumberComparator = new NumberComparator(true, 1);
	 
	 c1.compare(2.5, 2.5);          // 0
	 c1.compare(2.54, 2.54);        // 0
	 c1.compare(2.54, 2.56);        // -1
	 c1.compare(2.567, 2.567);      // 0
	 c1.compare(2.5678, 2.5677);    // 0
	 c1.compare(2.5678, 2.5674);    // 0
	 c1.compare(2.5674, 2.5678);    // 0
	 </codeblock>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.comparators.NumberComparator;
	 
	 var c2:NumberComparator = new NumberComparator(true, 2);
	 
	 c2.compare(2.5, 2.5);          // 0
	 c2.compare(2.54, 2.54);        // 0
	 c2.compare(2.54, 2.56);        // -1
	 c2.compare(2.567, 2.567);      // 0
	 c2.compare(2.5678, 2.5677);    // 0
	 c2.compare(2.5678, 2.5674);    // 0
	 c2.compare(2.5674, 2.5678);    // 0
	 </codeblock>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.comparators.NumberComparator;
	 
	 var c3:NumberComparator = new NumberComparator(true, 3);
	 
	 c3.compare(2.5, 2.5);          // 0
	 c3.compare(2.54, 2.54);        // 0
	 c3.compare(2.54, 2.56);        // -1
	 c3.compare(2.567, 2.567);      // 0
	 c3.compare(2.5678, 2.5677);    // 0
	 c3.compare(2.5678, 2.5674);    // 1
	 c3.compare(2.5674, 2.5678);    // -1
	 </codeblock>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.comparators.NumberComparator;
	 
	 var c4:NumberComparator = new NumberComparator(true, 4);
	 
	 c4.compare(2.5, 2.5);          // 0
	 c4.compare(2.54, 2.54);        // 0
	 c4.compare(2.54, 2.56);        // -1
	 c4.compare(2.567, 2.567);      // 0
	 c4.compare(2.5678, 2.5677);    // 1
	 c4.compare(2.5678, 2.5674);    // 1
	 c4.compare(2.5674, 2.5678);    // -1
	 </codeblock>
	 
	           </example>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.as3coreaddendum.system:IComparator"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
         <related-links>
            <link href="org.as3coreaddendum.system.xml#IComparator">
               <linktext>IComparator</linktext>
            </link>
         </related-links>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system.comparators:BooleanComparator">
         <apiName>BooleanComparator</apiName>
         <shortdesc>
	 A comparator for Boolean objects.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="BooleanComparator,org.as3coreaddendum.system.comparators.BooleanComparator,CASE_INSENSITIVE,FALSE_FIRST,LOWER_CASE_FIRST,TRUE_FIRST,UPPER_CASE_FIRST,comparator,comparison,comparison,decimalPlaces,property,stringCase,useDecimalPlaces,compare,compare,compare,compare,compare,compare,compare,compare,compare,toString,toString,toString,toString,toString"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.as3coreaddendum.system:IComparator</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A comparator for <codeph>Boolean</codeph> objects.
	 
	 </apiDesc>
            <example>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.comparators.BooleanComparator;
	 
	 var b1:BooleanComparator = new BooleanComparator(BooleanComparison.TRUE_FIRST);
	 
	 b1.compare(true, false);    // -1
	 b1.compare(false, true);    // 1
	 
	 var b2:BooleanComparator = new BooleanComparator(BooleanComparison.FALSE_FIRST);
	 
	 b2.compare(true, false);    // 1
	 b2.compare(false, true);    // -1
	 </codeblock>
	 
	           </example>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.as3coreaddendum.system:IComparator"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system.comparators:IndexComparator">
         <apiName>IndexComparator</apiName>
         <shortdesc>
	 A comparator for objects that implements the org.as3coreaddendum.system.IIndexable interface, comparing the index property.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IndexComparator,org.as3coreaddendum.system.comparators.IndexComparator,compare,compare,compare,compare,compare,compare,compare,compare,compare,toString,toString,toString,toString,toString"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.as3coreaddendum.system:IComparator</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A comparator for objects that implements the <codeph>org.as3coreaddendum.system.IIndexable</codeph> interface, comparing the <codeph>index</codeph> property.
	 
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.as3coreaddendum.system:IComparator"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
         <related-links>
            <link href="org.as3coreaddendum.system.xml#IComparator">
               <linktext>IComparator</linktext>
            </link>
            <link href="org.as3coreaddendum.system.xml#IIndexable">
               <linktext>IIndexable</linktext>
            </link>
         </related-links>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system.comparators:PropertyComparator">
         <apiName>PropertyComparator</apiName>
         <shortdesc>
	 This comparator uses the received comparator object to compare the values recovered from the property of each of the two objects.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="PropertyComparator,org.as3coreaddendum.system.comparators.PropertyComparator,CASE_INSENSITIVE,FALSE_FIRST,LOWER_CASE_FIRST,TRUE_FIRST,UPPER_CASE_FIRST,comparator,comparison,comparison,decimalPlaces,property,stringCase,useDecimalPlaces,compare,compare,compare,compare,compare,compare,compare,compare,compare,toString,toString,toString,toString,toString"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.as3coreaddendum.system:IComparator</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 This comparator uses the received <codeph>comparator</codeph> object to compare the values recovered from the <codeph>property</codeph> of each of the two objects.
	 
	 </apiDesc>
            <example>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.comparators.AlphabeticComparator;
	 import org.as3coreaddendum.system.comparators.NumberComparator;
	 import org.as3coreaddendum.system.comparators.PropertyComparator;
	 
	 var a:Object = { id: 1, name: "TestA" };
	 var b:Object = { id: 0, name: "TestB" };
	 var c:Object = { id: 2, name: "TestC" };
	  
	 var p1:PropertyComparator = new PropertyComparator("id", new NumberComparator());
	 
	 p1.compare(a, a)    // 0
	 p1.compare(a, b)    // 1
	 p1.compare(b, a)    // -1
	 p1.compare(b, c)    // -1
	 p1.compare(c, a)    // 1
	 
	 var p2:PropertyComparator = new PropertyComparator("name", new AlphabeticComparator());
	  
	 p2.compare(a, a)    // 0
	 p2.compare(a, b)    // -1
	 p2.compare(b, a)    // 1
	 p2.compare(b, c)    // -1
	 p2.compare(c, a)    // 1
	 </codeblock>
	 
	           </example>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.as3coreaddendum.system:IComparator"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system.comparators:StringComparator">
         <apiName>StringComparator</apiName>
         <shortdesc>
	 A comparator for String objects.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="StringComparator,org.as3coreaddendum.system.comparators.StringComparator,CASE_INSENSITIVE,FALSE_FIRST,LOWER_CASE_FIRST,TRUE_FIRST,UPPER_CASE_FIRST,comparator,comparison,comparison,decimalPlaces,property,stringCase,useDecimalPlaces,compare,compare,compare,compare,compare,compare,compare,compare,compare,toString,toString,toString,toString,toString"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.as3coreaddendum.system:IComparator</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A comparator for <codeph>String</codeph> objects.
	 
	 </apiDesc>
            <example>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.comparators.StringComparator;
	 
	 var c1:StringComparator = new StringComparator();
	 
	 c1.compare("comparison", "between");    // 1
	 c1.compare("between", "comparison");    // -1
	 c1.compare("between", "strings");       // 1
	 c1.compare("strings", "between");       // -1
	 c1.compare("STRINGS", "strings");       // 1
	 c1.compare("strings", "Strings");       // -1
	 c1.compare("strings", "strings");       // 0
	 
	 var c2:StringComparator = new StringComparator(false);
	 
	 c2.compare("STRINGS", "strings");    // 0
	 c2.compare("strings", "Strings");    // 0
	 c2.compare("between", "strings");    // 1
	 </codeblock>
	 
	           </example>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.as3coreaddendum.system:IComparator"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system.comparators:BooleanComparison">
         <apiName>BooleanComparison</apiName>
         <shortdesc>
	 The enumeration class that defines the acceptable values for the BooleanComparator.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="BooleanComparison,org.as3coreaddendum.system.comparators.BooleanComparison,CASE_INSENSITIVE,FALSE_FIRST,LOWER_CASE_FIRST,TRUE_FIRST,UPPER_CASE_FIRST,comparator,comparison,comparison,decimalPlaces,property,stringCase,useDecimalPlaces"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>org.as3coreaddendum.system:Enum</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The enumeration class that defines the acceptable values for the <codeph>BooleanComparator</codeph>.
	 <p>This is a type-safe enumeration class, which means there is no possibility of creating instances externally.
	 All acceptable values will be created automaticaly by this class internaly, through its constants.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="org.as3coreaddendum.system:Enum"/>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system.comparators:AlphabeticalComparison">
         <apiName>AlphabeticalComparison</apiName>
         <shortdesc>
	 The enumeration class that defines the acceptable values for the AlphabeticalComparator.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="AlphabeticalComparison,org.as3coreaddendum.system.comparators.AlphabeticalComparison,CASE_INSENSITIVE,FALSE_FIRST,LOWER_CASE_FIRST,TRUE_FIRST,UPPER_CASE_FIRST,comparator,comparison,comparison,decimalPlaces,property,stringCase,useDecimalPlaces"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>org.as3coreaddendum.system:Enum</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The enumeration class that defines the acceptable values for the <codeph>AlphabeticalComparator</codeph>.
	 <p>This is a type-safe enumeration class, which means there is no possibility of creating instances externally.
	 All acceptable values will be created automaticaly by this class internaly, through its constants.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="org.as3coreaddendum.system:Enum"/>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system.comparators:AlphabeticalComparator">
         <apiName>AlphabeticalComparator</apiName>
         <shortdesc>
	 A comparator for alphabetic order of String objects.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="AlphabeticalComparator,org.as3coreaddendum.system.comparators.AlphabeticalComparator,CASE_INSENSITIVE,FALSE_FIRST,LOWER_CASE_FIRST,TRUE_FIRST,UPPER_CASE_FIRST,comparator,comparison,comparison,decimalPlaces,property,stringCase,useDecimalPlaces,compare,compare,compare,compare,compare,compare,compare,compare,compare,toString,toString,toString,toString,toString"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.as3coreaddendum.system:IComparator</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A comparator for alphabetic order of <codeph>String</codeph> objects.
	 
	 </apiDesc>
            <example>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.comparators.AlphabeticComparator;
	 
	 var c1:AlphabeticComparator = new AlphabeticComparator(AlphabeticComparison.LOWER_CASE_FIRST);
	 
	 c1.compare("a", "a")                      // 0
	 c1.compare("a", "b")                      // -1
	 c1.compare("b", "a")                      // 1
	 c1.compare("a", "A")                      // -1
	 c1.compare("A", "a")                      // 1
	 c1.compare("comparison", "comparison")    // 0
	 c1.compare("comparison", "comParison")    // -1
	 c1.compare("comParison", "comparison")    // 1
	 c1.compare("comparison", "Comparison")    // -1
	 c1.compare("Comparison", "comparison")    // 1
	 c1.compare("between", "strings")          // -1
	 c1.compare("between", "Strings")          // -1
	 c1.compare("Between", "strings")          // -1
	 c1.compare("Between", "Strings")          // -1
	 c1.compare("between", "between")          // 0
	 c1.compare("between", "betweena")         // -1
	 c1.compare("betweena", "betweenA")        // -1
	 c1.compare("betweenA", "betweena")        // 1
	 c1.compare("TestA", "TestB")              // -1
	 c1.compare("TestB", "TestA")              // 1
	 </codeblock>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.comparators.AlphabeticComparator;
	 
	 var c2:AlphabeticComparator = new AlphabeticComparator(AlphabeticComparison.UPPER_CASE_FIRST);
	 
	 c2.compare("a", "a")                      // 0
	 c2.compare("a", "b")                      // -1
	 c2.compare("b", "a")                      // 1
	 c2.compare("a", "A")                      // 1
	 c2.compare("A", "a")                      // -1
	 c2.compare("comparison", "comparison")    // 0
	 c2.compare("comparison", "comParison")    // 1
	 c2.compare("comParison", "comparison")    // -1
	 c2.compare("comparison", "Comparison")    // 1
	 c2.compare("Comparison", "comparison")    // -1
	 c2.compare("between", "strings")          // -1
	 c2.compare("between", "Strings")          // -1
	 c2.compare("Between", "strings")          // -1
	 c2.compare("Between", "Strings")          // -1
	 c2.compare("between", "between")          // 0
	 c2.compare("between", "betweena")         // -1
	 c2.compare("betweena", "betweenA")        // 1
	 c2.compare("betweenA", "betweena")        // -1
	 c2.compare("TestA", "TestB")              // -1
	 c2.compare("TestB", "TestA")              // 1
	 </codeblock>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.comparators.AlphabeticComparator;
	 
	 var c3:AlphabeticComparator = new AlphabeticComparator(AlphabeticalComparison.CASE_INSENSITIVE);
	 
	 c3.compare("a", "a")                      // 0
	 c3.compare("a", "b")                      // -1
	 c3.compare("b", "a")                      // 1
	 c3.compare("a", "A")                      // 0
	 c3.compare("A", "a")                      // 0
	 c3.compare("comparison", "comparison")    // 0
	 c3.compare("comparison", "comParison")    // 0
	 c3.compare("comParison", "comparison")    // 0
	 c3.compare("comparison", "Comparison")    // 0
	 c3.compare("Comparison", "comparison")    // 0
	 c3.compare("between", "strings")          // -1
	 c3.compare("between", "Strings")          // -1
	 c3.compare("Between", "strings")          // -1
	 c3.compare("Between", "Strings")          // -1
	 c3.compare("between", "between")          // 0
	 c3.compare("between", "betweena")         // -1
	 c3.compare("betweena", "betweenA")        // 0
	 c3.compare("betweenA", "betweena")        // 0
	 c3.compare("TestA", "TestB")              // -1
	 c3.compare("TestB", "TestA")              // 1
	 </codeblock>
	 
	           </example>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.as3coreaddendum.system:IComparator"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
         <related-links>
            <link href="org.as3coreaddendum.system.comparators.xml#AlphabeticalComparison">
               <linktext>AlphabeticalComparison</linktext>
            </link>
         </related-links>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system.comparators:PriorityIndexComparator">
         <apiName>PriorityIndexComparator</apiName>
         <shortdesc>
	 A comparator for objects that implements the org.as3coreaddendum.system.IPriority and org.as3coreaddendum.system.IIndexable interfaces, comparing the priority and index properties.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="PriorityIndexComparator,org.as3coreaddendum.system.comparators.PriorityIndexComparator,compare,compare,compare,compare,compare,compare,compare,compare,compare,toString,toString,toString,toString,toString"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.as3coreaddendum.system:IComparator</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A comparator for objects that implements the <codeph>org.as3coreaddendum.system.IPriority</codeph> and <codeph>org.as3coreaddendum.system.IIndexable</codeph> interfaces, comparing the <codeph>priority</codeph> and <codeph>index</codeph> properties.
	 <p>This comparator is util when you want to sort the objects by priority, but if the priority of the two objects are equal, the <codeph>index</codeph> property of the objects are compared to decide wich object comes before.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.as3coreaddendum.system:IComparator"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
         <related-links>
            <link href="org.as3coreaddendum.system.xml#IComparator">
               <linktext>IComparator</linktext>
            </link>
            <link href="org.as3coreaddendum.system.xml#IIndexable">
               <linktext>IIndexable</linktext>
            </link>
            <link href="org.as3coreaddendum.system.xml#IPriority">
               <linktext>IPriority</linktext>
            </link>
         </related-links>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system.comparators:PriorityComparator">
         <apiName>PriorityComparator</apiName>
         <shortdesc>
	 A comparator for objects that implements the org.as3coreaddendum.system.IPriority interface, comparing the priority property.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="PriorityComparator,org.as3coreaddendum.system.comparators.PriorityComparator,compare,compare,compare,compare,compare,compare,compare,compare,compare,toString,toString,toString,toString,toString"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.as3coreaddendum.system:IComparator</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A comparator for objects that implements the <codeph>org.as3coreaddendum.system.IPriority</codeph> interface, comparing the <codeph>priority</codeph> property.
	 
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.as3coreaddendum.system:IComparator"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
         <related-links>
            <link href="org.as3coreaddendum.system.xml#IComparator">
               <linktext>IComparator</linktext>
            </link>
            <link href="org.as3coreaddendum.system.xml#IPriority">
               <linktext>IPriority</linktext>
            </link>
         </related-links>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system.comparators:DateComparator">
         <apiName>DateComparator</apiName>
         <shortdesc>
	 A comparator for Date objects.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="DateComparator,org.as3coreaddendum.system.comparators.DateComparator,compare,compare,compare,compare,compare,compare,compare,compare,compare,toString,toString,toString,toString,toString"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.as3coreaddendum.system:IComparator</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A comparator for <codeph>Date</codeph> objects.
	 
	 </apiDesc>
            <example>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.comparators.DateComparator;
	 
	 var c:DateComparator = new DateComparator();
	 
	 var d1:Date = new Date(2010, 04, 09);
	 var d2:Date = new Date(2010, 04, 10);
	 var d3:Date = new Date(2009, 04, 10);
	 var d4:Date = new Date(1980, 01, 15);
	 
	 c.compare(d1, d1)    // 0
	 c.compare(d1, d2)    // -1
	 c.compare(d2, d1)    // 1
	 c.compare(d2, d3)    // 1
	 c.compare(d3, d2)    // -1
	 c.compare(d1, d4)    // 1
	 c.compare(d4, d1)    // -1
	 
	 </codeblock>
	 
	           </example>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.as3coreaddendum.system:IComparator"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="org.as3coreaddendum.system">
      <apiName>org.as3coreaddendum.system</apiName>
      <apiDetail/>
      <apiClassifier id="org.as3coreaddendum.system:StringCase">
         <apiName>StringCase</apiName>
         <shortdesc>
	 The enumeration class that defines the acceptable values for string case.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="StringCase,org.as3coreaddendum.system.StringCase,CEIL,FLOOR,INSENSITIVE,NONE,ROUND,SENSITIVE,comparator,index,isInitialized,name,options,ordinal,priority,type"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>org.as3coreaddendum.system:Enum</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The enumeration class that defines the acceptable values for string case.
	 <p>This is a type-safe enumeration class, which means there is no possibility of creating instances externally.
	 All acceptable values will be created automaticaly by this class internaly, through its constants.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="org.as3coreaddendum.system:Enum"/>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:IEquatable">
         <apiName>IEquatable</apiName>
         <shortdesc>
	 This interface defines that a class can evaluate equality of instances.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IEquatable,org.as3coreaddendum.system.IEquatable,clone,compare,compareTo,compareTo,dispose,equals,equals,initialize,sort,toSource,toSource,toString,valueOf"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 This interface defines that a class can evaluate equality of instances.
	 <p>A class that implements this interface provides an arbitrary evaluation of equality with another object.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="org.as3coreaddendum.system:Enum"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:ISortable">
         <apiName>ISortable</apiName>
         <shortdesc>
	 A class that implements this interface indicates that it can be sorted by the sort() method.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ISortable,org.as3coreaddendum.system.ISortable,CEIL,FLOOR,INSENSITIVE,NONE,ROUND,SENSITIVE,comparator,index,isInitialized,name,options,ordinal,priority,type,clone,compare,compareTo,compareTo,dispose,equals,equals,initialize,sort,toSource,toSource,toString,valueOf"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 A class that implements this interface indicates that it can be sorted by the <codeph>sort()</codeph> method.
	 <p>Usually the classes that implement this interface are collections of some sort.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:NumericRounding">
         <apiName>NumericRounding</apiName>
         <shortdesc>
	 The enumeration class that defines the acceptable values for numeric rounding.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="NumericRounding,org.as3coreaddendum.system.NumericRounding,CEIL,FLOOR,INSENSITIVE,NONE,ROUND,SENSITIVE,comparator,index,isInitialized,name,options,ordinal,priority,type"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>org.as3coreaddendum.system:Enum</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 The enumeration class that defines the acceptable values for numeric rounding.
	 <p>This is a type-safe enumeration class, which means there is no possibility of creating instances externally.
	 All acceptable values will be created automaticaly by this class internaly, through its constants.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="org.as3coreaddendum.system:Enum"/>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:ISerializable">
         <apiName>ISerializable</apiName>
         <shortdesc>
	 Allows an object to control its own serialization.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ISerializable,org.as3coreaddendum.system.ISerializable,clone,compare,compareTo,compareTo,dispose,equals,equals,initialize,sort,toSource,toSource,toString,valueOf"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 Allows an object to control its own serialization.
	 
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="org.as3coreaddendum.system:Enum"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:IComparable">
         <apiName>IComparable</apiName>
         <shortdesc>
	 This interface imposes a total ordering on the objects of each class that implements it.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IComparable,org.as3coreaddendum.system.IComparable,clone,compare,compareTo,compareTo,dispose,equals,equals,initialize,sort,toSource,toSource,toString,valueOf"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 This interface imposes a total ordering on the objects of each class that implements it.
	 This ordering is referred to as the class's <i>natural ordering</i>, and the class's compareTo method is referred to as its <i>natural comparison method</i>.
	 
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="org.as3coreaddendum.system:Enum"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:ICloneable">
         <apiName>ICloneable</apiName>
         <shortdesc>
	 A class that implements this interface indicates that it can be cloned by the clone() method.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ICloneable,org.as3coreaddendum.system.ICloneable,clone,compare,compareTo,compareTo,dispose,equals,equals,initialize,sort,toSource,toSource,toString,valueOf"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 A class that implements this interface indicates that it can be cloned by the <codeph>clone()</codeph> method.
	 <p>The implementation of the <codeph>clone()</codeph> method should return a shallow copy of the object, copying every possible property.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:IDisposable">
         <apiName>IDisposable</apiName>
         <shortdesc>
	 This interface exposes a way to tell to an object that it is no longer needed.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IDisposable,org.as3coreaddendum.system.IDisposable,clone,compare,compareTo,compareTo,dispose,equals,equals,initialize,sort,toSource,toSource,toString,valueOf"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 This interface exposes a way to tell to an object that it is no longer needed.
	 <p>When the <codeph>dispose()</codeph> method is invoked on an object, it should stop all its processes and kill all its references to another objects, explicitly controlling the lifecycle of all its dependencies.
	 If the dependency also implements this interface, its <codeph>dispose()</codeph> method should be called by this object.</p>
	              <p>If the object has a parent class (base class) and the parent class also implements this interface, the <codeph>dispose()</codeph> method of the parent class should be called, propagating this action through the hierarchy of parents.</p>
	              <p>If the <codeph>dispose()</codeph> method is called more than once, the object should ignore all calls after the first one, without throwing an error.</p>
	              <p>Since the <codeph>dispose()</codeph> method was called, the object just wait to be released from memory by the garbage collection process.</p>
	              <p>The object should throw the org.as3coreaddendum.errors.ObjectDisposedError if some method is called after the <codeph>dispose()</codeph> method was called, indicating an illegal operation.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
         <related-links>
            <link href="org.as3coreaddendum.errors.xml#ObjectDisposedError">
               <linktext>ObjectDisposedError</linktext>
            </link>
         </related-links>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:IComparator">
         <apiName>IComparator</apiName>
         <shortdesc>
	 A comparison function, which imposes a total ordering on some collection of objects.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IComparator,org.as3coreaddendum.system.IComparator,clone,compare,compareTo,compareTo,dispose,equals,equals,initialize,sort,toSource,toSource,toString,valueOf"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 A comparison function, which imposes a <i>total ordering</i> on some collection of objects.
	 
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="org.as3coreaddendum.system.comparators:AlphabeticalComparator"/>
                  <Implementor id="org.as3coreaddendum.system.comparators:BooleanComparator"/>
                  <Implementor id="org.as3coreaddendum.system.comparators:DateComparator"/>
                  <Implementor id="org.as3coreaddendum.system.comparators:IndexComparator"/>
                  <Implementor id="org.as3coreaddendum.system.comparators:NumberComparator"/>
                  <Implementor id="org.as3coreaddendum.system.comparators:PriorityComparator"/>
                  <Implementor id="org.as3coreaddendum.system.comparators:PriorityIndexComparator"/>
                  <Implementor id="org.as3coreaddendum.system.comparators:PropertyComparator"/>
                  <Implementor id="org.as3coreaddendum.system.comparators:StringComparator"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:IIndexable">
         <apiName>IIndexable</apiName>
         <shortdesc>
	 This interface defines a contract for objects that contains an index.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IIndexable,org.as3coreaddendum.system.IIndexable,CEIL,FLOOR,INSENSITIVE,NONE,ROUND,SENSITIVE,comparator,index,isInitialized,name,options,ordinal,priority,type"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 This interface defines a contract for objects that contains an index.
	 <p>It can be used, for example, by objects that can be found or sorted by its index.</p>
	              <p>If the object also implements <codeph>flash.events.IEventDispatcher</codeph> interface, it is highly recommended that the object dispatches <codeph>org.as3coreaddendum.events.IndexEvent</codeph> when its <codeph>index</codeph> setter is invoked.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:Enum">
         <apiName>Enum</apiName>
         <shortdesc>
	 This is the base class for implementation of enumeration objects.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="Enum,org.as3coreaddendum.system.Enum,CEIL,FLOOR,INSENSITIVE,NONE,ROUND,SENSITIVE,comparator,index,isInitialized,name,options,ordinal,priority,type,clone,compare,compareTo,compareTo,dispose,equals,equals,initialize,sort,toSource,toSource,toString,valueOf"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.as3coreaddendum.system:IComparable</apiBaseInterface>
               <apiBaseInterface>org.as3coreaddendum.system:IEquatable</apiBaseInterface>
               <apiBaseInterface>org.as3coreaddendum.system:ISerializable</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 This is the base class for implementation of enumeration objects.
	 <p>This class shouldn't be instantiated directly, rather than enumeration classes must extend this class.</p>
	              <p>
                  <b>What is an Enumerated Type?</b>
               </p>
	              <p>An Enumerated Type is a data type that consists of a pre-defined set of values. Each enumerator (constant) is a value.
	 An Enumerated Type groups a set of interrelated logical values.</p>
	              <p>Actionscript 3.0 doesn't implements Enumerated types. Rather, its uses a class with only constants to define a set of interrelated logical values.</p>
	              <p>One example is the <codeph>flash.display.StageAlign</codeph> class. It is the set of logical values acceptable for the <codeph>flash.display.Stage.align</codeph> property.</p>
	              <p>But even without the support of Actionscript 3.0 for Enumerated types you can simulate this functionality extending this Enum class.</p>
	 
	              <p>
                  <b>Why use an Enumerated Type rather than a class with constants?</b>
               </p>
	              <p>Following the example above, if you open the Actionscript 3.0 Language Reference and quickly look at the class <codeph>flash.display.Stage</codeph> and see the <codeph>align</codeph> property, you will note that its type is <codeph>String</codeph>.
	 So you cannot immediatly know what values you can assign to it. Only after discovering that there is a class <codeph>flash.display.StageAlign</codeph> you note that these are the acceptable values.
	 So this is the first problem with this approach.</p>
	              <p>The second problem is that you really can assign any <codeph>String</codeph> to the <codeph>align</codeph> property.
	 Nothing guarantees you will pass the values that are actually in the <codeph>flash.display.StageAlign</codeph> class.
	 Nor will there be any error at compile time that say that something is wrong.</p>
	              <p>But if instead of using this approach was used Enumeration types, these two problems would become two good points.</p>
	              <p>First, looking at the Actionscript 3.0 Language Reference you would see that the property <codeph>align</codeph> is of the type <codeph>StageAlign</codeph>.
	 Automatically you check this class and see how to use it to assign a value for the <codeph>align</codeph> property.</p>
	              <p>Even better, if you make a mistake the compiler will warn you.
	 You will no longer able to send an invalid value for the property.</p>
	              <p>But even with this approach remains a problem to be solved. The client of your code can still create instances of your Enumerated Type and use them when needed.
	 In most cases this is undesirable, because you have already defined the set of acceptable values through constants in its Enumerated Type.</p>
	              <p>To resolve this problem exists a solution: the type-safe enum pattern. It is described with an example at the end of the page.</p>
	              <p>You can also check the class NumericRounding listed in the section "See also" below.</p>
	              <p>So to summarize the benefits of using Enumerated types: they make your code (or API) more readable and safe.</p>
	 
	           </apiDesc>
            <example>
	 
	              <b>Simple Enumerated Type</b>
	              <p>Suppose that we have an API that make loading of files.
	 The acceptable file types that the API can load can be defined by an Enumerated Type.
	 In this example the name of the Enumerated Type will be FileType. Note that you don't need to use the suffix "Enum" in its name.</p>
	              <p>Then we define the types that the API can load. In this example the API can load just image, swf and mp3 files.
	 So we have just three constants, one to each file type.</p>
	              <p>When we want to load a file, we use the appropriate constant to tell the API what type of file will be loaded.
	 If you need a file type that doesn't exists in the Enumerated Type, this means that the API doesn't support that file type.</p>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.Enum;
	 
	 public class FileType extends Enum
	 {
	 
	      public static const IMAGE   :FileType = new FileType("Image", 0);
	      public static const SWF     :FileType = new FileType("SWF", 1);
	      public static const MP3     :FileType = new FileType("MP3", 2);
	 
	      public function FileType(name:String, ordinal:int)
	      {
	           super(name, ordinal);
	      }
	 }
	 </codeblock>
	 
	              <b>Type-safe Enumerated Type</b>
	              <p>In the above example, if the user of the API need to load a file type that doesn't exists in the Enumerated Type, it could instantiate a new object FileType with the desired type, as in the example below:</p>
	              <codeblock rev="3.0">
	 import FileType;
	 
	 var videoFileType:FileType = new FileType("Video", 3);
	 </codeblock>
	 
	              <p>This behavior would be wrong, but still allowed by the technical point of view.
	 This would create the illusion that the user can create new types at runtime and send them to the API.</p>
	              <p>To prevent this mistake, we can implement a pattern named type-safe enum.
	 This pattern will prevents the user create new types, throwing a runtime error.</p>
	              <p>There are some ways to do this, we will see just one below:</p>
	 
	              <codeblock rev="3.0">
	 import org.as3coreaddendum.system.Enum;
	 
	 public class FileType extends Enum
	 {
	 
	      public static const IMAGE   :FileType = new FileType("Image", 0);
	      public static const SWF     :FileType = new FileType("SWF", 1);
	      public static const MP3     :FileType = new FileType("MP3", 2);
	 
	      private static var _created:Boolean = false;
	 
	      {
	           _created = true;
	      }
	 
	      public function FileType(name:String, ordinal:int)
	      {
	           super(name, ordinal);
	           if (_created) throw new IllegalOperationError("The set of acceptable values by this Enumerated Type has already been created internally.");
	      }
	 }
	 </codeblock>
	 
	              <p>What happens above is that when the FileType is loaded in the Flash Player memory at runtime, first all the static members are initialized.
	 After that the <i>static code block</i> is executed:</p>
	 
	              <codeblock rev="3.0">
	 {
	      _created = true;
	 }
	 </codeblock>
	 
	              <p>So first all the constants are initialized with the FileType instances because the <codeph>_created</codeph> static variable is <codeph>false</codeph> and then immediately after that the <codeph>_created</codeph> is set to <codeph>true</codeph>.
	 Thus no more instances can be created.</p>
	              <p>Your Enumerated Type is safe to be used only with the set of values pre-defined by you.</p>
	 
	           </example>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.as3coreaddendum.system:IComparable"/>
                  <Implement id="org.as3coreaddendum.system:IEquatable"/>
                  <Implement id="org.as3coreaddendum.system:ISerializable"/>
               </Implements>
               <Subclasses>
                  <class id="org.as3coreaddendum.system.comparators:BooleanComparison"/>
                  <class id="org.as3coreaddendum.system.comparators:AlphabeticalComparison"/>
                  <class id="org.as3coreaddendum.system:StringCase"/>
                  <class id="org.as3coreaddendum.system:NumericRounding"/>
               </Subclasses>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
         <related-links>
            <link href="org.as3coreaddendum.errors.xml#InvalidEnumArgumentError">
               <linktext>InvalidEnumArgumentError</linktext>
            </link>
            <link href="org.as3coreaddendum.system.xml#IComparable">
               <linktext>IComparable</linktext>
            </link>
            <link href="org.as3coreaddendum.system.xml#IEquatable">
               <linktext>IEquatable</linktext>
            </link>
            <link href="org.as3coreaddendum.system.xml#ISerializable">
               <linktext>ISerializable</linktext>
            </link>
         </related-links>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:IInitializable">
         <apiName>IInitializable</apiName>
         <shortdesc>
	 Defines an interface to initialize the object.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IInitializable,org.as3coreaddendum.system.IInitializable,CEIL,FLOOR,INSENSITIVE,NONE,ROUND,SENSITIVE,comparator,index,isInitialized,name,options,ordinal,priority,type,clone,compare,compareTo,compareTo,dispose,equals,equals,initialize,sort,toSource,toSource,toString,valueOf"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 Defines an interface to initialize the object.
	 <p>Classes that need to be initialized before being used can implement this interface to define an initialization pattern.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:ITypeable">
         <apiName>ITypeable</apiName>
         <shortdesc>
	 This interface defines a contract for objects that specify a type.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ITypeable,org.as3coreaddendum.system.ITypeable,CEIL,FLOOR,INSENSITIVE,NONE,ROUND,SENSITIVE,comparator,index,isInitialized,name,options,ordinal,priority,type"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 This interface defines a contract for objects that specify a type. A type can be anything, e.g. a <codeph>Class</codeph>, a <codeph>Function</codeph>, etc.
	 <p>It can be used, for example, by collections that restrict the type of its elements.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.as3coreaddendum.system:IPriority">
         <apiName>IPriority</apiName>
         <shortdesc>
	 This interface defines a contract for objects that contains a priority.</shortdesc>
         <prolog>
            <author>Flávio Silva
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IPriority,org.as3coreaddendum.system.IPriority,CEIL,FLOOR,INSENSITIVE,NONE,ROUND,SENSITIVE,comparator,index,isInitialized,name,options,ordinal,priority,type"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 This interface defines a contract for objects that contains a priority.
	 <p>If the object also implements <codeph>flash.events.IEventDispatcher</codeph> interface, it is highly recommended that the object dispatches <codeph>org.as3coreaddendum.events.PriorityEvent</codeph> when its <codeph>priority</codeph> setter is invoked.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
</allClasses>